// <auto-generated />
using System;
using System.Collections.Generic;
using AjKpi.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AjKpi.Database.Persistence.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20241124180038_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AjKpi.Domain.Attachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AttachmentGroupId")
                        .HasColumnType("bigint")
                        .HasColumnName("ATTACHMENT_GROUP_ID");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("CODE");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATED_DATE");

                    b.Property<string>("EntityCode")
                        .HasColumnType("text")
                        .HasColumnName("ENTITY_CODE");

                    b.Property<string>("FileKey")
                        .HasColumnType("text")
                        .HasColumnName("FILE_KEY");

                    b.Property<string>("FileName")
                        .HasColumnType("text")
                        .HasColumnName("FILE_NAME");

                    b.Property<string>("FilePath")
                        .HasColumnType("text")
                        .HasColumnName("FILE_PATH");

                    b.Property<long?>("FileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("FILE_SIZE");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("MODIFIED_DATE");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentGroupId");

                    b.ToTable("ATTACHMENTS", "AJKPI");
                });

            modelBuilder.Entity("AjKpi.Domain.AttachmentGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("CODE");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATED_DATE");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IS_ACTIVE");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("MODIFIED_DATE");

                    b.HasKey("Id");

                    b.ToTable("ATTACHMENT_GROUPS", "AJKPI");
                });

            modelBuilder.Entity("AjKpi.Domain.Auth", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("CODE");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATED_DATE");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("LOGIN");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("MODIFIED_DATE");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("PASSWORD");

                    b.Property<Guid>("Salt")
                        .HasMaxLength(1000)
                        .HasColumnType("uuid")
                        .HasColumnName("SALT");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("USER_ID");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.HasIndex("Salt")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("AUTHS", "AJKPI");
                });

            modelBuilder.Entity("AjKpi.Domain.Department", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("CODE");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATED_DATE");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("MODIFIED_DATE");

                    b.Property<string>("NameAr")
                        .HasColumnType("text")
                        .HasColumnName("NAME_AR");

                    b.Property<string>("NameEn")
                        .HasColumnType("text")
                        .HasColumnName("NAME_EN");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("VALID_FROM");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("VALID_TO");

                    b.HasKey("Id");

                    b.ToTable("DEPARTMENTS", "AJKPI");
                });

            modelBuilder.Entity("AjKpi.Domain.Kpi", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AggregateCoefficientValuesMethodAId")
                        .HasColumnType("bigint")
                        .HasColumnName("AGGREGATE_COEFFICIENT_VALUES_METHOD_A_ID");

                    b.Property<long?>("AggregateCoefficientValuesMethodBId")
                        .HasColumnType("bigint")
                        .HasColumnName("AGGREGATE_COEFFICIENT_VALUES_METHOD_B_ID");

                    b.Property<long?>("BalancedScoredId")
                        .HasColumnType("bigint")
                        .HasColumnName("BALANCED_SCORED_ID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("CODE");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATED_DATE");

                    b.Property<string>("DescriptionAAr")
                        .HasColumnType("text")
                        .HasColumnName("DESCRIPTION_A_AR");

                    b.Property<string>("DescriptionAEn")
                        .HasColumnType("text")
                        .HasColumnName("DESCRIPTION_A_EN");

                    b.Property<string>("DescriptionAr")
                        .HasColumnType("text")
                        .HasColumnName("DESCRIPTION_AR");

                    b.Property<string>("DescriptionBAr")
                        .HasColumnType("text")
                        .HasColumnName("DESCRIPTION_B_AR");

                    b.Property<string>("DescriptionBEn")
                        .HasColumnType("text")
                        .HasColumnName("DESCRIPTION_B_EN");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("text")
                        .HasColumnName("DESCRIPTION_EN");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("END_DATE");

                    b.Property<decimal?>("FirstResult")
                        .HasColumnType("numeric")
                        .HasColumnName("FIRST_RESULT");

                    b.Property<string>("FirstResultDetails")
                        .HasColumnType("text")
                        .HasColumnName("FIRST_RESULT_DETAILS");

                    b.Property<long?>("FirstResultSourceId")
                        .HasColumnType("bigint")
                        .HasColumnName("FIRST_RESULT_SOURCE_ID");

                    b.Property<long?>("IndexClassId")
                        .HasColumnType("bigint")
                        .HasColumnName("INDEX_CLASS_ID");

                    b.Property<long?>("IndexCreationRateId")
                        .HasColumnType("bigint")
                        .HasColumnName("INDEX_CREATION_RATE_ID");

                    b.Property<long?>("IndexSourceId")
                        .HasColumnType("bigint")
                        .HasColumnName("INDEX_SOURCE_ID");

                    b.Property<long?>("IndicatorModularityId")
                        .HasColumnType("bigint")
                        .HasColumnName("INDICATOR_MODULARITY_ID");

                    b.Property<long?>("InputMethodId")
                        .HasColumnType("bigint")
                        .HasColumnName("INPUT_METHOD_ID");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IS_DELETED");

                    b.Property<bool?>("IsPrivet")
                        .HasColumnType("boolean")
                        .HasColumnName("IS_PRIVET");

                    b.Property<long?>("KpiTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("KPI_TYPE_ID");

                    b.Property<long?>("MathematicalEquationAbId")
                        .HasColumnType("bigint")
                        .HasColumnName("MATHEMATICAL_EQUATION_AB_ID");

                    b.Property<long?>("MeasurementCycleId")
                        .HasColumnType("bigint")
                        .HasColumnName("MEASUREMENT_CYCLE_ID");

                    b.Property<long?>("MeasurementUnitId")
                        .HasColumnType("bigint")
                        .HasColumnName("MEASUREMENT_UNIT_ID");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("MODIFIED_DATE");

                    b.Property<string>("NameAr")
                        .HasColumnType("text")
                        .HasColumnName("NAME_AR");

                    b.Property<string>("NameEn")
                        .HasColumnType("text")
                        .HasColumnName("NAME_EN");

                    b.Property<string>("Number")
                        .HasColumnType("text")
                        .HasColumnName("NUMBER");

                    b.Property<long?>("OperationActionId")
                        .HasColumnType("bigint")
                        .HasColumnName("OPERATION_ACTION_ID");

                    b.Property<long?>("OwnerDepartemntId")
                        .HasColumnType("bigint")
                        .HasColumnName("OWNER_DEPARTEMNT_ID");

                    b.Property<decimal?>("Percantage")
                        .HasColumnType("numeric")
                        .HasColumnName("PERCANTAGE");

                    b.Property<long?>("PoliticsId")
                        .HasColumnType("bigint")
                        .HasColumnName("POLITICS_ID");

                    b.Property<long?>("QualityOfLifeId")
                        .HasColumnType("bigint")
                        .HasColumnName("QUALITY_OF_LIFE_ID");

                    b.Property<long?>("RelatedStratigicGoalId")
                        .HasColumnType("bigint")
                        .HasColumnName("RELATED_STRATIGIC_GOAL_ID");

                    b.Property<long?>("RequestId")
                        .HasColumnType("bigint")
                        .HasColumnName("REQUEST_ID");

                    b.Property<long?>("RiskId")
                        .HasColumnType("bigint")
                        .HasColumnName("RISK_ID");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("START_DATE");

                    b.Property<bool?>("StatisticalIndicator")
                        .HasColumnType("boolean")
                        .HasColumnName("STATISTICAL_INDICATOR");

                    b.Property<long?>("StatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("STATUS_ID");

                    b.Property<long?>("SustainableDevelopmentGoalId")
                        .HasColumnType("bigint")
                        .HasColumnName("SUSTAINABLE_DEVELOPMENT_GOAL_ID");

                    b.Property<long?>("SustainableDevelopmentGoalsId")
                        .HasColumnType("bigint")
                        .HasColumnName("SUSTAINABLE_DEVELOPMENT_GOALS_ID");

                    b.Property<long?>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("TYPE_ID");

                    b.HasKey("Id");

                    b.HasIndex("AggregateCoefficientValuesMethodAId");

                    b.HasIndex("AggregateCoefficientValuesMethodBId");

                    b.HasIndex("BalancedScoredId");

                    b.HasIndex("FirstResultSourceId");

                    b.HasIndex("IndexClassId");

                    b.HasIndex("IndexCreationRateId");

                    b.HasIndex("IndexSourceId");

                    b.HasIndex("IndicatorModularityId");

                    b.HasIndex("InputMethodId");

                    b.HasIndex("KpiTypeId");

                    b.HasIndex("MathematicalEquationAbId");

                    b.HasIndex("MeasurementCycleId");

                    b.HasIndex("MeasurementUnitId");

                    b.HasIndex("OperationActionId");

                    b.HasIndex("OwnerDepartemntId");

                    b.HasIndex("PoliticsId");

                    b.HasIndex("QualityOfLifeId");

                    b.HasIndex("RelatedStratigicGoalId");

                    b.HasIndex("RequestId");

                    b.HasIndex("RiskId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SustainableDevelopmentGoalsId");

                    b.HasIndex("TypeId");

                    b.ToTable("KPIS", "AJKPI");
                });

            modelBuilder.Entity("AjKpi.Domain.KpiTask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AValue")
                        .HasColumnType("bigint")
                        .HasColumnName("A_VALUE");

                    b.Property<long?>("BValue")
                        .HasColumnType("bigint")
                        .HasColumnName("B_VALUE");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("CODE");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATED_DATE");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("END_DATE");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IS_DELETED");

                    b.Property<bool?>("IsLocked")
                        .HasColumnType("boolean")
                        .HasColumnName("IS_LOCKED");

                    b.Property<long?>("KpiId")
                        .HasColumnType("bigint")
                        .HasColumnName("KPI_ID");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("MODIFIED_DATE");

                    b.Property<decimal?>("ResultValue")
                        .HasColumnType("numeric")
                        .HasColumnName("RESULT_VALUE");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("START_DATE");

                    b.Property<long?>("Target")
                        .HasColumnType("bigint")
                        .HasColumnName("TARGET");

                    b.Property<decimal?>("VerificationRate")
                        .HasColumnType("numeric")
                        .HasColumnName("VERIFICATION_RATE");

                    b.HasKey("Id");

                    b.HasIndex("KpiId");

                    b.ToTable("KPI_TASKS", "AJKPI");
                });

            modelBuilder.Entity("AjKpi.Domain.Lookup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("CODE");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATED_DATE");

                    b.Property<string>("DataType")
                        .HasColumnType("text")
                        .HasColumnName("DATA_TYPE");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IS_DELETED");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean")
                        .HasColumnName("IS_SYSTEM");

                    b.Property<long?>("Links")
                        .HasColumnType("bigint")
                        .HasColumnName("LINKS");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("MODIFIED_DATE");

                    b.Property<string>("NameAr")
                        .HasColumnType("text")
                        .HasColumnName("NAME_AR");

                    b.Property<string>("NameEn")
                        .HasColumnType("text")
                        .HasColumnName("NAME_EN");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("PARENT_ID");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("VALID_FROM");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("VALID_TO");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("LOOKUPS", "AJKPI");
                });

            modelBuilder.Entity("AjKpi.Domain.LookupValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("CODE");

                    b.Property<string>("Color")
                        .HasColumnType("text")
                        .HasColumnName("COLOR");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATED_DATE");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IS_DELETED");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean")
                        .HasColumnName("IS_SYSTEM");

                    b.Property<long?>("LookupId")
                        .HasColumnType("bigint")
                        .HasColumnName("LOOKUP_ID");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("MODIFIED_DATE");

                    b.Property<string>("NameAr")
                        .HasColumnType("text")
                        .HasColumnName("NAME_AR");

                    b.Property<string>("NameEn")
                        .HasColumnType("text")
                        .HasColumnName("NAME_EN");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint")
                        .HasColumnName("ORDER");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("PARENT_ID");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("VALID_FROM");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("VALID_TO");

                    b.HasKey("Id");

                    b.HasIndex("LookupId");

                    b.HasIndex("ParentId");

                    b.ToTable("LOOKUP_VALUES", "AJKPI");
                });

            modelBuilder.Entity("AjKpi.Domain.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("CODE");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATED_DATE");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("MODIFIED_DATE");

                    b.Property<string>("NameAr")
                        .HasColumnType("text")
                        .HasColumnName("NAME_AR");

                    b.Property<string>("NameEn")
                        .HasColumnType("text")
                        .HasColumnName("NAME_EN");

                    b.Property<long?>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("ROLE_ID");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("VALID_FROM");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("VALID_TO");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("PERMISSIONS", "AJKPI");
                });

            modelBuilder.Entity("AjKpi.Domain.Request", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AuthorId")
                        .HasColumnType("text")
                        .HasColumnName("AUTHOR_ID");

                    b.Property<string>("AuthorType")
                        .HasColumnType("text")
                        .HasColumnName("AUTHOR_TYPE");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("CODE");

                    b.Property<List<string>>("CompositeKeys")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("COMPOSITE_KEYS");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATED_DATE");

                    b.Property<string>("CurrentStatusDescriptionAr")
                        .HasColumnType("text")
                        .HasColumnName("CURRENT_STATUS_DESCRIPTION_AR");

                    b.Property<string>("CurrentStatusDescriptionEn")
                        .HasColumnType("text")
                        .HasColumnName("CURRENT_STATUS_DESCRIPTION_EN");

                    b.Property<string>("Data")
                        .HasColumnType("text")
                        .HasColumnName("DATA");

                    b.Property<long?>("ExternalId")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnName("EXTERNAL_ID");

                    b.Property<List<string>>("GlobalCompositeKeys")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("GLOBAL_COMPOSITE_KEYS");

                    b.Property<string>("InitDepartmentCode")
                        .HasColumnType("text")
                        .HasColumnName("INIT_DEPARTMENT_CODE");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("MODIFIED_DATE");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("NOTE");

                    b.Property<string>("Number")
                        .HasColumnType("text")
                        .HasColumnName("NUMBER");

                    b.Property<long?>("StatusId")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnName("STATUS_ID");

                    b.Property<string>("TargetDepartmentCode")
                        .HasColumnType("text")
                        .HasColumnName("TARGET_DEPARTMENT_CODE");

                    b.Property<string>("TargetRoleCode")
                        .HasColumnType("text")
                        .HasColumnName("TARGET_ROLE_CODE");

                    b.Property<long?>("TypeId")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnName("TYPE_ID");

                    b.HasKey("Id");

                    b.HasIndex("Number");

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeId");

                    b.ToTable("REQUESTS", "AJKPIWf");
                });

            modelBuilder.Entity("AjKpi.Domain.RequestStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ActionNameAr")
                        .HasColumnType("text")
                        .HasColumnName("ACTION_NAME_AR");

                    b.Property<string>("ActionNameEn")
                        .HasColumnType("text")
                        .HasColumnName("ACTION_NAME_EN");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("CODE");

                    b.Property<string>("Color")
                        .HasColumnType("text")
                        .HasColumnName("COLOR");

                    b.Property<string>("CssClass")
                        .HasColumnType("text")
                        .HasColumnName("CSS_CLASS");

                    b.Property<string>("DepartmentCode")
                        .HasColumnType("text")
                        .HasColumnName("DEPARTMENT_CODE");

                    b.Property<string>("DescriptionAr")
                        .HasColumnType("text")
                        .HasColumnName("DESCRIPTION_AR");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("text")
                        .HasColumnName("DESCRIPTION_EN");

                    b.Property<string>("Icon")
                        .HasColumnType("text")
                        .HasColumnName("ICON");

                    b.Property<bool?>("IsAction")
                        .HasColumnType("boolean")
                        .HasColumnName("IS_ACTION");

                    b.Property<bool?>("IsDeletable")
                        .HasColumnType("boolean")
                        .HasColumnName("IS_DELETABLE");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IS_DELETED");

                    b.Property<bool?>("IsEditable")
                        .HasColumnType("boolean")
                        .HasColumnName("IS_EDITABLE");

                    b.Property<bool?>("IsEndState")
                        .IsRequired()
                        .HasColumnType("boolean")
                        .HasColumnName("IS_END_STATE");

                    b.Property<bool?>("IsStartingState")
                        .IsRequired()
                        .HasColumnType("boolean")
                        .HasColumnName("IS_STARTING_STATE");

                    b.Property<List<string>>("NextStatusCodes")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("NEXT_STATUS_CODES");

                    b.Property<List<string>>("PreviousStatusCodes")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("PREVIOUS_STATUS_CODES");

                    b.Property<long?>("RequestTypeId")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnName("REQUEST_TYPE_ID");

                    b.Property<List<string>>("Roles")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("ROLES");

                    b.Property<bool>("SelfAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("SELF_ALLOWED");

                    b.HasKey("Id");

                    b.HasIndex("RequestTypeId");

                    b.HasIndex("Code", "RequestTypeId")
                        .IsUnique();

                    b.ToTable("REQUEST_STATUSES", "AJKPIWf");
                });

            modelBuilder.Entity("AjKpi.Domain.RequestType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("CODE");

                    b.Property<string>("CompositeKeyTemplate")
                        .HasColumnType("text")
                        .HasColumnName("COMPOSITE_KEY_TEMPLATE");

                    b.Property<List<string>>("ConcurrencyPreventedTypeCodes")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("CONCURRENCY_PREVENTED_TYPE_CODES");

                    b.Property<string>("EventQueueName")
                        .HasColumnType("text")
                        .HasColumnName("EVENT_QUEUE_NAME");

                    b.Property<string>("GlobalCompositeKeyTemplate")
                        .HasColumnType("text")
                        .HasColumnName("GLOBAL_COMPOSITE_KEY_TEMPLATE");

                    b.Property<int?>("MaxAllowedRequests")
                        .HasColumnType("integer")
                        .HasColumnName("MAX_ALLOWED_REQUESTS");

                    b.Property<string>("NameAr")
                        .HasColumnType("text")
                        .HasColumnName("NAME_AR");

                    b.Property<string>("NameEn")
                        .HasColumnType("text")
                        .HasColumnName("NAME_EN");

                    b.Property<bool?>("PreventConcurrentRequests")
                        .IsRequired()
                        .HasColumnType("boolean")
                        .HasColumnName("PREVENT_CONCURRENT_REQUESTS");

                    b.Property<string>("RequestNumberTemplate")
                        .HasColumnType("text")
                        .HasColumnName("REQUEST_NUMBER_TEMPLATE");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("REQUEST_TYPES", "AJKPIWf");
                });

            modelBuilder.Entity("AjKpi.Domain.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("CODE");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATED_DATE");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("DEPARTMENT_ID");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("MODIFIED_DATE");

                    b.Property<string>("NameAr")
                        .HasColumnType("text")
                        .HasColumnName("NAME_AR");

                    b.Property<string>("NameEn")
                        .HasColumnType("text")
                        .HasColumnName("NAME_EN");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("VALID_FROM");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("VALID_TO");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("ROLES", "AJKPI");
                });

            modelBuilder.Entity("AjKpi.Domain.SystemMenu", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("CODE");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATED_DATE");

                    b.Property<string>("Icon")
                        .HasColumnType("text")
                        .HasColumnName("ICON");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("MODIFIED_DATE");

                    b.Property<string>("ModuleCode")
                        .HasColumnType("text")
                        .HasColumnName("MODULE_CODE");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("NAME");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("PARENT_ID");

                    b.Property<string>("Permission")
                        .HasColumnType("text")
                        .HasColumnName("PERMISSION");

                    b.Property<string>("Route")
                        .HasColumnType("text")
                        .HasColumnName("ROUTE");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("SYSTEM_MENUS", "AJKPI");
                });

            modelBuilder.Entity("AjKpi.Domain.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("CODE");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATED_DATE");

                    b.Property<long?>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnName("DEPARTMENT_ID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("EMAIL");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("MOBILE_NUMBER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("MODIFIED_DATE");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("NAME_AR");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("NAME_EN");

                    b.Property<long?>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("ROLE_ID");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("STATUS");

                    b.Property<string>("UserName")
                        .HasColumnType("text")
                        .HasColumnName("USER_NAME");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("USERS", "AJKPI");
                });

            modelBuilder.Entity("AjKpi.Domain.WfTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Action")
                        .HasColumnType("text")
                        .HasColumnName("ACTION");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("CODE");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("COMMENT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATED_DATE");

                    b.Property<string>("DepartmentCode")
                        .HasColumnType("text")
                        .HasColumnName("DEPARTMENT_CODE");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("MODIFIED_DATE");

                    b.Property<string>("NewStatusCode")
                        .HasColumnType("text")
                        .HasColumnName("NEW_STATUS_CODE");

                    b.Property<string>("NewStatusDescriptionAr")
                        .HasColumnType("text")
                        .HasColumnName("NEW_STATUS_DESCRIPTION_AR");

                    b.Property<string>("NewStatusDescriptionEn")
                        .HasColumnType("text")
                        .HasColumnName("NEW_STATUS_DESCRIPTION_EN");

                    b.Property<string>("OldStatusCode")
                        .HasColumnType("text")
                        .HasColumnName("OLD_STATUS_CODE");

                    b.Property<string>("OldStatusDescriptionAr")
                        .HasColumnType("text")
                        .HasColumnName("OLD_STATUS_DESCRIPTION_AR");

                    b.Property<string>("OldStatusDescriptionEn")
                        .HasColumnType("text")
                        .HasColumnName("OLD_STATUS_DESCRIPTION_EN");

                    b.Property<long?>("RequestId")
                        .HasColumnType("bigint")
                        .HasColumnName("REQUEST_ID");

                    b.Property<string>("RoleCode")
                        .HasColumnType("text")
                        .HasColumnName("ROLE_CODE");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("WF_TRANSACTIONS", "AJKPIWf");
                });

            modelBuilder.Entity("AjKpi.Domain.Attachment", b =>
                {
                    b.HasOne("AjKpi.Domain.AttachmentGroup", "AttachmentGroup")
                        .WithMany("Attachments")
                        .HasForeignKey("AttachmentGroupId");

                    b.Navigation("AttachmentGroup");
                });

            modelBuilder.Entity("AjKpi.Domain.Auth", b =>
                {
                    b.HasOne("AjKpi.Domain.User", "User")
                        .WithOne()
                        .HasForeignKey("AjKpi.Domain.Auth", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AjKpi.Domain.Kpi", b =>
                {
                    b.HasOne("AjKpi.Domain.LookupValue", "AggregateCoefficientValuesMethodA")
                        .WithMany()
                        .HasForeignKey("AggregateCoefficientValuesMethodAId");

                    b.HasOne("AjKpi.Domain.LookupValue", "AggregateCoefficientValuesMethodB")
                        .WithMany()
                        .HasForeignKey("AggregateCoefficientValuesMethodBId");

                    b.HasOne("AjKpi.Domain.LookupValue", "BalancedScored")
                        .WithMany()
                        .HasForeignKey("BalancedScoredId");

                    b.HasOne("AjKpi.Domain.LookupValue", "FirstResultSource")
                        .WithMany()
                        .HasForeignKey("FirstResultSourceId");

                    b.HasOne("AjKpi.Domain.LookupValue", "IndexClass")
                        .WithMany()
                        .HasForeignKey("IndexClassId");

                    b.HasOne("AjKpi.Domain.LookupValue", "IndexCreationRate")
                        .WithMany()
                        .HasForeignKey("IndexCreationRateId");

                    b.HasOne("AjKpi.Domain.LookupValue", "IndexSource")
                        .WithMany()
                        .HasForeignKey("IndexSourceId");

                    b.HasOne("AjKpi.Domain.LookupValue", "IndicatorModularity")
                        .WithMany()
                        .HasForeignKey("IndicatorModularityId");

                    b.HasOne("AjKpi.Domain.LookupValue", "InputMethod")
                        .WithMany()
                        .HasForeignKey("InputMethodId");

                    b.HasOne("AjKpi.Domain.LookupValue", "KpiType")
                        .WithMany()
                        .HasForeignKey("KpiTypeId");

                    b.HasOne("AjKpi.Domain.LookupValue", "MathematicalEquationAb")
                        .WithMany()
                        .HasForeignKey("MathematicalEquationAbId");

                    b.HasOne("AjKpi.Domain.LookupValue", "MeasurementCycle")
                        .WithMany()
                        .HasForeignKey("MeasurementCycleId");

                    b.HasOne("AjKpi.Domain.LookupValue", "MeasurementUnit")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitId");

                    b.HasOne("AjKpi.Domain.LookupValue", "OperationAction")
                        .WithMany()
                        .HasForeignKey("OperationActionId");

                    b.HasOne("AjKpi.Domain.Department", "OwnerDepartemnt")
                        .WithMany()
                        .HasForeignKey("OwnerDepartemntId");

                    b.HasOne("AjKpi.Domain.LookupValue", "Politics")
                        .WithMany()
                        .HasForeignKey("PoliticsId");

                    b.HasOne("AjKpi.Domain.LookupValue", "QualityOfLife")
                        .WithMany()
                        .HasForeignKey("QualityOfLifeId");

                    b.HasOne("AjKpi.Domain.LookupValue", "RelatedStratigicGoal")
                        .WithMany()
                        .HasForeignKey("RelatedStratigicGoalId");

                    b.HasOne("AjKpi.Domain.Request", "Reqeust")
                        .WithMany()
                        .HasForeignKey("RequestId");

                    b.HasOne("AjKpi.Domain.LookupValue", "Risk")
                        .WithMany()
                        .HasForeignKey("RiskId");

                    b.HasOne("AjKpi.Domain.LookupValue", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.HasOne("AjKpi.Domain.LookupValue", "SustainableDevelopmentGoals")
                        .WithMany()
                        .HasForeignKey("SustainableDevelopmentGoalsId");

                    b.HasOne("AjKpi.Domain.RequestType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.Navigation("AggregateCoefficientValuesMethodA");

                    b.Navigation("AggregateCoefficientValuesMethodB");

                    b.Navigation("BalancedScored");

                    b.Navigation("FirstResultSource");

                    b.Navigation("IndexClass");

                    b.Navigation("IndexCreationRate");

                    b.Navigation("IndexSource");

                    b.Navigation("IndicatorModularity");

                    b.Navigation("InputMethod");

                    b.Navigation("KpiType");

                    b.Navigation("MathematicalEquationAb");

                    b.Navigation("MeasurementCycle");

                    b.Navigation("MeasurementUnit");

                    b.Navigation("OperationAction");

                    b.Navigation("OwnerDepartemnt");

                    b.Navigation("Politics");

                    b.Navigation("QualityOfLife");

                    b.Navigation("RelatedStratigicGoal");

                    b.Navigation("Reqeust");

                    b.Navigation("Risk");

                    b.Navigation("Status");

                    b.Navigation("SustainableDevelopmentGoals");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("AjKpi.Domain.KpiTask", b =>
                {
                    b.HasOne("AjKpi.Domain.Kpi", "Kpi")
                        .WithMany("KpiTasks")
                        .HasForeignKey("KpiId");

                    b.Navigation("Kpi");
                });

            modelBuilder.Entity("AjKpi.Domain.Lookup", b =>
                {
                    b.HasOne("AjKpi.Domain.Lookup", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("AjKpi.Domain.LookupValue", b =>
                {
                    b.HasOne("AjKpi.Domain.Lookup", "Lookup")
                        .WithMany("LookupValues")
                        .HasForeignKey("LookupId");

                    b.HasOne("AjKpi.Domain.LookupValue", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Lookup");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("AjKpi.Domain.Permission", b =>
                {
                    b.HasOne("AjKpi.Domain.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AjKpi.Domain.Request", b =>
                {
                    b.HasOne("AjKpi.Domain.RequestStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AjKpi.Domain.RequestType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("AjKpi.Domain.RequestStatus", b =>
                {
                    b.HasOne("AjKpi.Domain.RequestType", "RequestType")
                        .WithMany("Statuses")
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RequestType");
                });

            modelBuilder.Entity("AjKpi.Domain.RequestType", b =>
                {
                    b.OwnsMany("AjKpi.Domain.SearchEntry", "SearchEntries", b1 =>
                        {
                            b1.Property<long>("RequestTypeId1")
                                .HasColumnType("bigint");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Code")
                                .HasColumnType("text")
                                .HasColumnName("CODE");

                            b1.Property<string>("Name")
                                .HasColumnType("text")
                                .HasColumnName("NAME");

                            b1.Property<string>("Path")
                                .HasColumnType("text")
                                .HasColumnName("PATH");

                            b1.Property<string>("RequestTypeId")
                                .HasColumnType("text")
                                .HasColumnName("REQUEST_TYPE_ID");

                            b1.Property<string>("Type")
                                .HasColumnType("text")
                                .HasColumnName("TYPE");

                            b1.HasKey("RequestTypeId1", "Id");

                            b1.ToTable("RequestTypeSearchEntries", "AJKPIWf");

                            b1.WithOwner("RequestType")
                                .HasForeignKey("RequestTypeId1");

                            b1.Navigation("RequestType");
                        });

                    b.Navigation("SearchEntries");
                });

            modelBuilder.Entity("AjKpi.Domain.Role", b =>
                {
                    b.HasOne("AjKpi.Domain.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("AjKpi.Domain.SystemMenu", b =>
                {
                    b.HasOne("AjKpi.Domain.SystemMenu", "Parent")
                        .WithMany("Child")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("AjKpi.Domain.User", b =>
                {
                    b.HasOne("AjKpi.Domain.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AjKpi.Domain.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Department");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AjKpi.Domain.WfTransaction", b =>
                {
                    b.HasOne("AjKpi.Domain.Request", "Request")
                        .WithMany("WfTransactions")
                        .HasForeignKey("RequestId");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("AjKpi.Domain.AttachmentGroup", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("AjKpi.Domain.Kpi", b =>
                {
                    b.Navigation("KpiTasks");
                });

            modelBuilder.Entity("AjKpi.Domain.Lookup", b =>
                {
                    b.Navigation("LookupValues");
                });

            modelBuilder.Entity("AjKpi.Domain.Request", b =>
                {
                    b.Navigation("WfTransactions");
                });

            modelBuilder.Entity("AjKpi.Domain.RequestType", b =>
                {
                    b.Navigation("Statuses");
                });

            modelBuilder.Entity("AjKpi.Domain.Role", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("AjKpi.Domain.SystemMenu", b =>
                {
                    b.Navigation("Child");
                });
#pragma warning restore 612, 618
        }
    }
}
